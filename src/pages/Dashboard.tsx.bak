import { useState, useEffect, useMemo } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { ref, query, orderByChild, equalTo, onValue, get, update, getDatabase, child, set, serverTimestamp, push, remove } from "firebase/database";
import { toast } from "sonner";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogDescription } from "@/components/ui/dialog";
import Navbar from "@/components/Navbar";
import { useAuth } from "@/contexts/AuthContext";
import { useNavigate } from "react-router-dom";
import { format } from "date-fns";
import { database } from "@/firebase";

interface TripRequest {
  userId: string;
  userName: string;
  userEmail: string;
  status: 'pending' | 'approved' | 'rejected';
  requestedAt: number;
}

interface Trip {
  id: string;
  from: string;
  to: string;
  date: string;
  time: string;
  vehicleMode: string;
  availableSeats: number;
  totalSeats: number;
  pricePerPerson: number;
  totalTripCost: number;
  isCostDoubtful?: boolean;
  creatorId: string;
  creatorName: string;
  creatorPhone?: string;
  creatorCollege: string;
  status: 'active' | 'completed' | 'cancelled';
  createdAt: number;
  requests?: { [userId: string]: Omit<TripRequest, 'userId'> & { phone?: string } };
  phone?: string;
}

const Dashboard = () => {
  const { user, isAuthenticated } = useAuth();
  const navigate = useNavigate();
  const [trips, setTrips] = useState<Trip[]>([]);
  const [myTrips, setMyTrips] = useState<Trip[]>([]);
  const [selectedTrip, setSelectedTrip] = useState<Trip | null>(null);
  const [userProfiles, setUserProfiles] = useState<{[key: string]: {name: string; phone: string}}>({});
  const [tripContacts, setTripContacts] = useState<{[tripId: string]: Array<{name: string; phone: string; isCreator: boolean}> | null}>({});

  // ... (keep all the existing hooks and functions until render)

  // Check if a trip can be deleted (within 48 hours of departure)
  const canDeleteTrip = (trip: Trip) => {
    const now = new Date();
    const tripDate = new Date(`${trip.date}T${trip.time}`);
    // Calculate the difference in hours
    const hoursUntilTrip = (tripDate.getTime() - now.getTime()) / (1000 * 60 * 60);
    return hoursUntilTrip > 48;
  };

  // Handle trip deletion
  const handleDeleteTrip = async (tripId: string) => {
    if (!window.confirm('Are you sure you want to delete this trip? This action cannot be undone.')) {
      return;
    }

    try {
      const tripRef = ref(database, `trips/${tripId}`);
      await remove(tripRef);
      toast.success('Trip deleted successfully');
    } catch (error) {
      console.error('Error deleting trip:', error);
      toast.error('Failed to delete trip');
    }
  };

  // ... (keep the rest of the existing code)

  return (
    <div className="min-h-screen bg-gradient-to-br from-primary/5 via-secondary/5 to-accent/10">
      <Navbar />
      
      <div className="max-w-7xl mx-auto px-4 py-8">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-primary mb-2">
            Welcome back, {user?.name?.split(' ')[0]}!
          </h1>
          <p className="text-muted-foreground">Manage your trips and find new travel companions</p>
        </div>

        <div className="grid lg:grid-cols-2 gap-8">
          {/* Upcoming Trips */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>Upcoming Trips</span>
                <Badge variant="secondary">{upcomingTrips.length}</Badge>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {upcomingTrips.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-muted-foreground mb-4">No upcoming trips</p>
                  <Button onClick={() => navigate('/find-trips')}>
                    Find Trips
                  </Button>
                </div>
              ) : (
                <div className="space-y-4">
                  {upcomingTrips.slice(0, 3).map((trip) => (
                    <div key={trip.id} className="border rounded-lg p-4 hover:bg-accent/50 transition-colors">
                      <div>
                        <div className="cursor-pointer" onClick={() => navigate(`/trip/${trip.id}`)}>
                          <div className="flex justify-between items-start mb-2">
                            <h3 className="font-semibold">{trip.from} → {trip.to}</h3>
                            <Badge variant={trip.isCostDoubtful ? 'outline' : 'default'}>
                              {formatPrice(trip)}
                            </Badge>
                          </div>
                          <div className="text-sm text-muted-foreground">
                            {format(new Date(trip.date), 'MMM d, yyyy')} at {trip.time}
                          </div>
                          <div className="text-sm mt-1">
                            {trip.availableSeats} seats available
                          </div>
                        </div>
                        
                        {/* Request to Join Button */}
                        {trip.creatorId !== user?.id && (
                          <div className="mt-3 flex justify-end">
                            {trip.requests && trip.requests[user?.id || ''] ? (
                              <Badge variant="outline" className="mt-1">
                                Request {trip.requests[user.id].status}
                              </Badge>
                            ) : (
                              <Button 
                                size="sm" 
                                onClick={(e) => {
                                  e.stopPropagation();
                                  handleRequestToJoin(trip);
                                }}
                                disabled={trip.availableSeats <= 0}
                              >
                                {trip.availableSeats > 0 ? 'Request to Join' : 'No Seats Available'}
                              </Button>
                            )}
                          </div>
                        )}
                      </div>
                      
                      {getContactInfo(trip.id) && (
                        <div className="mt-3 pt-3 border-t">
                          <h4 className="text-sm font-medium mb-2">Contact Information:</h4>
                          <div className="space-y-2">
                            {getContactInfo(trip.id)?.map((person, index) => (
                              <div key={index} className="flex justify-between items-center text-sm">
                                <span className="font-medium">
                                  {person.name} {person.isCreator && '(Host)'}
                                </span>
                                <a 
                                  href={`tel:${person.phone}`}
                                  className="text-primary hover:underline"
                                  onClick={(e) => e.stopPropagation()}
                                >
                                  {person.phone}
                                </a>
                              </div>
                            ))}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>

          {/* My Created Trips */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center justify-between">
                <span>My Created Trips</span>
                <div className="flex gap-2">
                  <Badge variant="secondary">{myTrips.length}</Badge>
                  <Button size="sm" onClick={() => navigate('/create-trip')}>
                    Create Trip
                  </Button>
                </div>
              </CardTitle>
            </CardHeader>
            <CardContent>
              {myTrips.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-muted-foreground mb-4">No trips created yet</p>
                  <Button onClick={() => navigate('/create-trip')}>
                    Create Your First Trip
                  </Button>
                </div>
              ) : (
                <div className="space-y-4">
                  {myTrips.map((trip) => (
                    <div key={trip.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start mb-2">
                        <h3 className="font-semibold">{trip.from} → {trip.to}</h3>
                        <Badge variant={trip.status === 'active' ? 'default' : 'secondary'}>
                          {trip.status}
                        </Badge>
                      </div>
                      <div className="text-sm text-muted-foreground mb-2">
                        {format(new Date(trip.date), 'MMM d, yyyy')} at {trip.time}
                      </div>
                      <div className="flex justify-between items-center gap-2 mt-2">
                        <span className="text-sm">
                          {trip.availableSeats}/{trip.totalSeats} seats available
                        </span>
                        <div className="flex gap-2">
                          <Dialog>
                            <DialogTrigger asChild>
                              <Button 
                                size="sm" 
                                variant="outline"
                                onClick={() => handleManageRequests(trip)}
                                className="flex items-center gap-1.5"
                              >
                                <span>Manage Requests</span>
                                {trip.requests ? (
                                  <Badge className="h-5 w-5 flex items-center justify-center rounded-full p-0 text-xs">
                                    {Object.values(trip.requests).filter((r: any) => r.status === 'pending').length}
                                  </Badge>
                                ) : null}
                              </Button>
                            </DialogTrigger>
                            <DialogContent>
                              <DialogHeader>
                                <DialogTitle>Manage Trip Requests</DialogTitle>
                                <DialogDescription>
                                  Review and approve or reject requests for this trip.
                                </DialogDescription>
                              </DialogHeader>
                              <div className="space-y-4">
                                {!trip.requests || Object.keys(trip.requests).length === 0 ? (
                                  <p className="text-muted-foreground">No requests yet</p>
                                ) : (
                                  Object.entries(trip.requests).map(([userId, request]: [string, any]) => (
                                    <div key={userId} className="flex items-center justify-between p-3 border rounded">
                                      <div>
                                        <p className="font-medium">{request.userName || 'Unknown User'}</p>
                                        <p className="text-sm text-muted-foreground">{request.userEmail || 'No email provided'}</p>
                                      </div>
                                      <div className="flex gap-2">
                                        {request.status === 'pending' ? (
                                          <>
                                            <Button 
                                              size="sm" 
                                              onClick={() => handleRequestAction(trip.id, userId, 'approve')}
                                            >
                                              Approve
                                            </Button>
                                            <Button 
                                              size="sm" 
                                              variant="outline"
                                              onClick={() => handleRequestAction(trip.id, userId, 'reject')}
                                            >
                                              Reject
                                            </Button>
                                          </>
                                        ) : (
                                          <Badge variant={request.status === 'approved' ? 'default' : 'destructive'}>
                                            {request.status}
                                          </Badge>
                                        )}
                                      </div>
                                    </div>
                                  ))
                                )}
                              </div>
                            </DialogContent>
                          </Dialog>
                          
                          {canDeleteTrip(trip) && (
                            <Button 
                              variant="destructive" 
                              size="sm"
                              onClick={(e) => {
                                e.stopPropagation();
                                handleDeleteTrip(trip.id);
                              }}
                            >
                              Delete Trip
                            </Button>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Quick Actions */}
        <div className="mt-8 grid md:grid-cols-3 gap-4">
          <Card className="p-6 text-center hover:shadow-lg transition-shadow cursor-pointer" onClick={() => navigate('/find-trips')}>
            <div className="text-2xl mb-2">🔍</div>
            <h3 className="font-semibold mb-1">Find Trips</h3>
            <p className="text-sm text-muted-foreground">Browse available rides</p>
          </Card>
          
          <Card className="p-6 text-center hover:shadow-lg transition-shadow cursor-pointer" onClick={() => navigate('/create-trip')}>
            <div className="text-2xl mb-2">➕</div>
            <h3 className="font-semibold mb-1">Create Trip</h3>
            <p className="text-sm text-muted-foreground">Start a new ride</p>
          </Card>
          
          <Card className="p-6 text-center hover:shadow-lg transition-shadow cursor-pointer" onClick={() => navigate('/profile')}>
            <div className="text-2xl mb-2">👤</div>
            <h3 className="font-semibold mb-1">Profile</h3>
            <p className="text-sm text-muted-foreground">Manage your account</p>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default Dashboard;
